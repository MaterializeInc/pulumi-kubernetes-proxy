# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 host_port: pulumi.Input[int],
                 kubeconfig: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 pod_selector: pulumi.Input[str],
                 remote_port: pulumi.Input[int]):
        """
        The set of arguments for constructing a Provider resource.
        """
        pulumi.set(__self__, "host_port", host_port)
        pulumi.set(__self__, "kubeconfig", kubeconfig)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "pod_selector", pod_selector)
        pulumi.set(__self__, "remote_port", remote_port)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def kubeconfig(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kubeconfig")

    @kubeconfig.setter
    def kubeconfig(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubeconfig", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="podSelector")
    def pod_selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pod_selector")

    @pod_selector.setter
    def pod_selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "pod_selector", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "remote_port", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 kubeconfig: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 pod_selector: Optional[pulumi.Input[str]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Kubernetes-proxy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Kubernetes-proxy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 kubeconfig: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 pod_selector: Optional[pulumi.Input[str]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if host_port is None and not opts.urn:
                raise TypeError("Missing required property 'host_port'")
            __props__.__dict__["host_port"] = pulumi.Output.from_input(host_port).apply(pulumi.runtime.to_json) if host_port is not None else None
            if kubeconfig is None and not opts.urn:
                raise TypeError("Missing required property 'kubeconfig'")
            __props__.__dict__["kubeconfig"] = kubeconfig
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            if pod_selector is None and not opts.urn:
                raise TypeError("Missing required property 'pod_selector'")
            __props__.__dict__["pod_selector"] = pod_selector
            if remote_port is None and not opts.urn:
                raise TypeError("Missing required property 'remote_port'")
            __props__.__dict__["remote_port"] = pulumi.Output.from_input(remote_port).apply(pulumi.runtime.to_json) if remote_port is not None else None
        super(Provider, __self__).__init__(
            'kubernetes-proxy',
            resource_name,
            __props__,
            opts)

